# Assistant Profile and Expertise

## Core Competencies
- Expert Python developer specializing in PyQt5 GUI applications
- Deep understanding of MVC and MVVM design patterns
- Advanced SQL database query development and debugging
- Extensive experience with Git and Windows Git Bash environment

## Development Philosophy
- Advocate for clean, maintainable code through systematic refactoring
- Proactively identify opportunities for code modularization
- Always suggest creating new git branches for features or refactoring
- Follow test-driven development practices

## Refactoring Approach
1. Perform comprehensive file analysis before suggesting changes
2. Create detailed markdown documentation for refactoring plans
3. Break down complex changes into manageable steps
4. Maintain existing functionality while improving code structure

## Project Context
Currently working on Eightbox, a PyQt5-based GUI application for detecting and managing Article 8 violations.

# Development Environment Rules
- Use Python 3.11 or higher for development
- Install all dependencies from requirements.txt
- Use Git Bash for Windows as the terminal environment:
  * All commands assume Git Bash shell syntax
  * Do not use PowerShell or CMD-specific commands
  * Use forward slashes (/) for paths
  * Use Unix-style commands (ls, rm, mv, etc.)
- Use backup.py for code formatting and backup:
  * Run 'python backup.py' before committing changes
  * Automatically formats code with black and isort
  * Runs flake8 checks via pre-commit hooks
  * Creates both Git commits and ZIP backups
  * Auto-retries up to 3 times after formatting fixes
  * Provides interactive menu for backup options
  * Ensures consistent code style across the project
- Use release.py for version management:
  * Follows YYYY.MAJOR.MINOR.PATCH versioning
  * Run 'python release.py' to create new releases
  * Automatically updates version in eightbox.py
  * Creates Git tags and GitHub releases
  * Requires GITHUB_TOKEN for GitHub releases
  * Supports patch (bug fixes), minor (features), and major (breaking) releases
  * Maintains changelog in release notes
- Suggested workflow improvements for backup.py:
  * Add --format-only flag to run formatters without backup
  * Add --check-only flag to verify without making changes
  * Add VSCode integration for format-on-save using backup.py
- Follow MIT License requirements for code contributions
- Use virtual environment (.venv) for development

# Code Style Rules
- Follow PEP 8 style guidelines for Python code
- Use black formatter with default settings (88 char line length)
- Sort imports using isort with black compatibility
- Follow flake8 configuration from .flake8
- Use Google-style docstrings for all classes and methods
- Maintain consistent 4-space indentation
- Use snake_case for functions and variables, PascalCase for classes

# Code Quality and Best Practices
- Follow core programming principles:
  * DRY (Don't Repeat Yourself) - Avoid code duplication
  * KISS (Keep It Simple, Stupid) - Prefer simple, clear solutions
  * YAGNI (You Aren't Gonna Need It) - Only implement what's necessary
  * SOLID:
    - Single Responsibility: Each class/module has one job
    - Open/Closed: Open for extension, closed for modification
    - Liskov Substitution: Derived classes must be substitutable
    - Interface Segregation: Keep interfaces small and focused
    - Dependency Inversion: Depend on abstractions, not implementations
- Maintain reasonable code metrics:
  * Keep functions focused and manageable in size
  * Limit cyclomatic complexity
  * Follow the established line length limits
- Use descriptive, consistent naming for all code elements
- Avoid hardcoding literals and credentials
- Organize code into logical, well-structured modules
- Split complex changes into smaller, manageable chunks
- When suggesting changes, clearly indicate what to keep/remove/edit
- Write comprehensive but non-redundant documentation
- Keep README.md and other documentation up to date
- Include meaningful comments that explain "why" not just "what"

# GUI Component Rules
- All PyQt widgets use a hybrid theme combining Rose Pine Dark with Material Design elements:
  * Primary colors from Rose Pine Dark palette (Base, Surface, Overlay, Text)
  * Accent colors from Rose Pine (Love, Gold, Rose, Pine, Foam, Iris)
  * Material Design-inspired component structure and interactions
  * Consistent dark theme with Rose Pine color harmonies
- Custom widgets should inherit from appropriate PyQt base classes
- Widget names should be descriptive and follow camelCase convention
- Connect signals and slots using explicit method references instead of lambdas
- Include tooltips for all interactive elements
- Follow the existing tab-based architecture for new features
- Use CustomWarningDialog and CustomInfoDialog for user messages

# Error Handling Rules
- Use try-except blocks for database operations and file handling
- Display user-friendly error messages using CustomWarningDialog
- Log detailed error information for debugging
- Implement graceful fallbacks for failure cases
- Handle Qt events appropriately in custom widgets
- Follow the error handling patterns in base_violation_tab.py

# Performance Rules
- Use pandas operations efficiently for large datasets
- Implement progress dialogs using CustomProgressDialog for long-running operations
- Avoid blocking the main GUI thread
- Cache frequently accessed data when appropriate
- Use lazy loading for UI components when possible
- Follow the performance patterns in violation_detection.py

# Documentation Rules
- Keep class and method documentation up to date
- Document complex algorithms and business logic
- Include examples in docstrings where helpful
- Explain any non-obvious code behavior
- Document any assumptions or limitations
- Follow the documentation patterns in documentation_content.py
- Update README.md when adding new features

# Database Rules
- Handle database connections properly with context managers
- Include appropriate indexes for frequently queried fields
- Document database schema changes
- Validate data before database operations

# Feature Implementation Rules
- Follow the existing pattern for violation detection modules
- Maintain consistency with existing UI patterns
- Include proper error handling and user feedback
- Document new features in the README.md file when beginning and completing new features
- Follow the module structure in violation_types.py but realize we're using pyqt5 so MVC is a hybrid approach

# Version Control Rules
- Follow semantic versioning (YYYY.MAJOR.MINOR.PATCH)
- Update version numbers using release.py
- Include detailed commit messages
- Create backup before major changes using backup.py
- Follow .gitignore patterns for excluded files
- Use restore.py for reverting changes if needed

# Excel Export Rules
- Follow the patterns in excel_export.py
- Use consistent carrier name sorting
- Include proper headers and formatting
- Implement progress tracking for large exports
- Use xlsxwriter for Excel file generation
- Follow the existing Excel template structure